version: "3.8"

services:
  webapp:
    # Opción 1: Usar imagen preconstruida definida en una variable de entorno o nombrada literalmente como : 
    # image-name:image-tag ejemplo : my-image:v1 o my-image:latest
    # image: ${WEBAPP_IMAGE}  # Define la imagen vía variable de entorno

    # Opción 1.1: Usar imagen hosteada en Docker Hub o en Azure Container Registry (necesario autenticación):
    # image: dockerhub_usuario/mi_webapp:latest
    # image: miacr.azurecr.io/mi_webapp:latest
    
    # Opción 2: Construir la imagen a partir de un Dockerfile local
    build:
      context: ./ruta_a_tu_codigo  # Ruta al directorio que contiene tu Dockerfile
      dockerfile: Dockerfile       # Opcional, solo si el nombre es distinto
    container_name: fastapi_app
    ports:
      - "8000:8000"  # host-port:container-port >> Exponer el puerto 8000 del contenedor al host
    volumes:
      # Bind mount: mapea la carpeta local ./host_data al directorio /data del contenedor
      - ./host_data:/data
    environment:
      # Variables de entorno para la configuración de la aplicación
      - ENVIRONMENT=production
      - DB_HOST=db
      - DB_PORT=5432
      - LOG_LEVEL=info
    depends_on:
      db:
        condition: service_healthy  # Espera a que la base de datos esté saludable antes de iniciar
    secrets:
      # Se inyecta el secreto 'server-certificate' en el contenedor.
      # Este secreto se montará automáticamente en /run/secrets/server-certificate
      - server-certificate
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - app_net

  db:
    image: postgres:13
    container_name: postgres_db
    volumes:
      # Volumen externo para persistencia de datos en PostgreSQL
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=fastapi_db
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.50"
          memory: "1G"
        reservations:
          cpus: "0.25"
          memory: "512M"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  # Declaración de volumen externo para la base de datos
  db_data:
    external: true

secrets:
  # Definición global del secreto 'server-certificate'
  # Se especifica el archivo desde donde se carga el secreto
  server-certificate:
    file: ./path/to/server-certificate.pem  # Ruta al archivo del certificado
